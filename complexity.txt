Time-complexity
...........................................
..............................................



O-notation: Big oh O(n):worst case time complexity : search 238 

 Ω-notation: best case time complexity :search 20 

Θ-notation: average case time complexity




worst case [O(big oh)] , best case [ Ω(Big omega)] ,average case[Θ(Big theta)]
----------------------------------------------------------------------------------
search 
   20 10 5 100 300 17 238

 worst case: search 238    : maximum runtime   : O(n)
 best case :search  20     : constant/ minimum comparison : Ω(1)
 average case:(summation of times best to worst)/(no of cases) : (1+2+3+4+5+6+7)/7 : Θ(n)

 if no of element =n
 average case time comlexity :  ?
  (1+2+3+4.............+n)/n=n(n+1)/n= n+1 
  Θ(n)    : directly propotional to n






case1: 

for(int i=1;i<=n;i++)
{
    a=a+1;    //this will run n times // O(n)
}

............................................................


Space-complexity
.............................
...............................

int n;     //4 byte                                   
cin>>n;
int a=0;    //4 byte
for(int i=1;i<=n;i++)   //4 byte 
{
    a=a+1; 
}

total Space=4+4+4=12    //cons tant

.....................................................................

*********************************************
*      *      *      *              *       *
*  a1  *  a2  *  a3  *..............*   an  *
*      *      *      *              *       *
*********************************************

arr[n]
array takes:   (space ∝ n)   (linear)

.....................................................................

for(int i=1;i<=n;i++)
{
      a=a+1;    // comparison=n times
}
for(int j=1;j<=m;j++)
{
    a=a+1;    //comparison= m times
}

time complexity= O(n+m)

...............................................................

for(int i=1;i<=n;i++)
for(int i=1;i<=n;i++)
{
    a=a+1;    //this will run n*n=n^2 times // O(n^2)
}
................................................................


for(int i=1;i<=n;i++)
for(int j=1;j<=m;j++)
{
    a=a+1;    //for each i no of comparison in 2nd loop= maximum,for n no of i comparison =n*m times
              // O(n*m)
}

...............................................................................................................
for(int i=1;i<=n;i++)
for(int j=1;j<=m;j++)
{
    a=a+1;    //for each i no of comparison in 2nd loop= maximum,for n no of i comparison =n*m times
              // O(n*m)
}

for(int i=1;i<=n;i++)
{
    a=a+1;    //this will run n times // O(n)
}

excecution ∝ (n*m + n)
complexity = O( n*m +n )
...........................................................................
q:what is the complexity of code below ?

int n;
int i=n;
 while(i>=1)
 {
     a=a+1;
     i/=2;  
 }    


if k times loop run i = n/(2^k)    [as initially i=n]
and if it becomes < 1 then loop stops,and we can say

 n/(2^k) >= 1
=> n>=2^k
=> k = log(n)  :total no of comparison

comlexity= O(log(n))
........................................................................
for(int i=1;i<=1;i++)
for(int j=1;j<=n;j+=i )
{
    a=a+1;    
}

explanation:
i loop run = n times
j loop run 
         n times for i=1
         n/2 times for i=2 [as gap=2]
         n/3 times for i=3 [as gap =3] 
         ----------------------------
         n/n=1 tme for i=n
    for j loop total execution= n + n/2 + n/3 + n/4 +......+ 1=n(1+1/2+1/3+1/4+.........+1/n)    
    as we know ∫(1/x)dx =logx so this series will be less than or equal <= nlog(n)
                            =nlog(n)
            
comlexity: O(nlogn)
........................................................................
for(int i=n;i>=1;i/2)  
for(int j=1;j<=i;j++)
{
    a=a+1;    
}

///rechek calculation: need review

complexity=?
          j loop run(times)
i=n ---->  n
i=n/2--->  n/2
i=1-------> 1    

=n+n/2+n/4+.............+1=n(1+1/2+1/2^2+........+1/n)=n(1/(1-1/2))=n*2
==O(2n)

___________________________________________________________________________________________

complexity analysis
--------------------

O          n=1          n=2       n=3
_______________________________________________
n          1            const     const    fast    runtime small
n^2        1             4         9
n^3        1             8         27      slow


___________________________________________________________________________________________

f(n)= n          n<=1000
      n^2         n>1000

  Time complexity=?     

Time complexity = O(n^2)    [time comlexity calculated only for large no of input]
________________________________________________________________________________________________

g1(n)=n     n<=100
     n^4     n>100

g2(n)=n^3    n<=100
      n^2     n>100

g1(n) + g2(n) ----->O(n^4)+ O(n^2)=O(n^4+n^2)  (because complexity calculated only for large inputs)
                    = O(n^4)   it is large compared to O(n^2)
___________________________________________________________________________________________________

O(n^n) > O(n!) > O(n^3) > O(n^2) > O(n.log(n)) > O(n.log(log(n))) > O(n) > O(sqrt(n)) > O(log(n)) > O(1)

____________________________________________________________________________________________________

